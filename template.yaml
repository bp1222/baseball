AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Serverless Application for Baseball Series
  Includes
  A Typescript frontend for getting the season standings, stored in S3
  A Route53 managed domain
  A Lambda function for getting the season standings
  A DynamoDB table for storing the season standings

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  ApplicationFQDN:
    Type: String
    Description: Fully qualified domain name for the application, for example baseballseries.info
    Default: baseballseries.info
  ZoneId:
    Type: String
    Description: Route53 Zone ID

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
    Domain:
      DomainName: !Sub "api.${ApplicationFQDN}"
      CertificateArn: !Ref APICertificate
      Route53:
        HostedZoneId: !Ref ZoneId

Resources:
  #
  # Dynamo DB
  #
  SeasonStandingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SeasonStandingsTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sort
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk 
          KeyType: HASH
        - AttributeName: sort
          KeyType: RANGE

  #
  # Lambda
  #
  getSeasonStandings:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getSeasonStandings
      CodeUri: lambda/
      Handler: src/handlers/getSeasonStandings.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 120
      Description: Function to pull MLB Standings Data from a DynamoDB Cache, and store if new
      Environment:
        Variables:
          DEVELOPMENT: 'false'
          FQDN: !Ref ApplicationFQDN
          SEASON_STANDINGS_TABLE: !Ref SeasonStandingsTable
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /{season}/{league}
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SeasonStandingsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/getSeasonStandings.ts

  #
  # S3 Bucket
  #
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ApplicationFQDN
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${AWS::StackName}-s3-origin-oai"

  WebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'

  #
  # CloudFront
  #
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref ApplicationFQDN
          - !Sub "www.${ApplicationFQDN}"
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: !Sub "${AWS::StackName}-website-s3-origin"
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginAccessIdentity}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: !Sub "${AWS::StackName}-website-s3-origin"
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref ApplicationCertificate
          SslSupportMethod: sni-only

  CloudFrontRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref ZoneId
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt Distribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront Hosted Zone ID
          Name: !Ref ApplicationFQDN
          Type: A
        - AliasTarget:
            DNSName: !GetAtt Distribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront Hosted Zone ID
          Name: !Ref ApplicationFQDN
          Type: AAAA
        - AliasTarget:
            DNSName: !GetAtt Distribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront Hosted Zone ID
          Name: !Sub "www.${ApplicationFQDN}"
          Type: A
        - AliasTarget:
            DNSName: !GetAtt Distribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: "Z2FDTNDATAQYW2" # CloudFront Hosted Zone ID
          Name: !Sub "www.${ApplicationFQDN}"
          Type: AAAA

  #
  # Certificates
  #
  ApplicationCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApplicationFQDN
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Ref ApplicationFQDN
        - !Sub www.${ApplicationFQDN}
      DomainValidationOptions:
        - DomainName: !Ref ApplicationFQDN
          HostedZoneId: !Ref ZoneId
        - DomainName: !Sub "www.${ApplicationFQDN}"
          HostedZoneId: !Ref ZoneId

  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "api.${ApplicationFQDN}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub 'api.${ApplicationFQDN}'
          HostedZoneId: !Ref ZoneId

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  DistributionId:
    Description: CloudFront Distribution Id
    Value: !Ref Distribution
  WebsiteBucketName:
    Description: "Name of S3 bucket to hold website content"
    Value: !Ref WebsiteBucket
  WebsiteUrl:
    Description: "Name of S3 bucket to hold website content"
    Value: !Sub "https://${ApplicationFQDN}"
  GetSeasonStandingsFunction:
    Description: "GetSeasonStandings Lambda Function ARN"
    Value: !GetAtt getSeasonStandings.Arn
  GetSeasonStandingsFunctionIamRole:
    Description: "Implicit IAM Role created for GetSeasonStandings function"
    Value: !GetAtt getSeasonStandingsRole.Arn