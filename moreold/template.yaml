AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  lambda
  Sample SAM Template for lambda


Globals:
  Function:
    Timeout: 10
    Runtime: nodejs20.x
    Layers:
      - !Ref StatsApiLayer
    Environment:
      Variables:
        STANDINGS_TABLE_NAME: !Ref SeasonStandingsTable
        STANDINGS_TABLE_ARN: !GetAtt SeasonStandingsTable.Arn

Resources:
  SeasonStandingsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Handler: getLeagueSeasonStandings.lambdaHandler
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SeasonStandingsTable
      Events:
        SeasonStandingsApiGETseasonleague:
          Type: Api
          Properties:
            Path: /{season}/{league}
            Method: GET
            RestApiId: !Ref SeasonStandingsApi
    Metadata:
      # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: es2020
        Sourcemap: false
        EntryPoints:
          - getLeagueSeasonStandings.ts
        External:
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-dynamodb'
          - '@bp1222/stats-api'

  SeasonStandingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: season
          AttributeType: S
        - AttributeName: league
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: season
          KeyType: HASH
        - AttributeName: league
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  StatsApiLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      ContentUri: ./layer/
      CompatibleRuntimes:
        - nodejs20.x

  SeasonStandingsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: SeasonStandingsApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /{season}/{league}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SeasonStandingsFunction.Arn}/invocations
              responses: {}
      Cors:
        AllowOrigin: '''https://baseballseries.info'''
        MaxAge: 5

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"