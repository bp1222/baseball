/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An API for MLB Stat API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Schedule, Season, Seasons, Teams } from "../models/index";
import {
  ScheduleFromJSON,
  ScheduleToJSON,
  SeasonFromJSON,
  SeasonToJSON,
  SeasonsFromJSON,
  SeasonsToJSON,
  TeamsFromJSON,
  TeamsToJSON,
} from "../models/index";

export interface GetSchedulesRequest {
  sportId: number;
  teamId?: number;
  startDate?: string;
  endDate?: string;
}

export interface GetSeasonRequest {
  sportId: number;
  season: number;
}

export interface GetSeasonsRequest {
  sportId: number;
}

export interface GetTeamsRequest {
  sportId: number;
}

/**
 *
 */
export class MlbApi extends runtime.BaseAPI {
  /**
   * Returns Schedules
   * Retrieves schedules
   */
  async getSchedulesRaw(
    requestParameters: GetSchedulesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Schedule>> {
    if (
      requestParameters.sportId === null ||
      requestParameters.sportId === undefined
    ) {
      throw new runtime.RequiredError(
        "sportId",
        "Required parameter requestParameters.sportId was null or undefined when calling getSchedules.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sportId !== undefined) {
      queryParameters["sportId"] = requestParameters.sportId;
    }

    if (requestParameters.teamId !== undefined) {
      queryParameters["teamId"] = requestParameters.teamId;
    }

    if (requestParameters.startDate !== undefined) {
      queryParameters["startDate"] = requestParameters.startDate;
    }

    if (requestParameters.endDate !== undefined) {
      queryParameters["endDate"] = requestParameters.endDate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/schedule`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ScheduleFromJSON(jsonValue),
    );
  }

  /**
   * Returns Schedules
   * Retrieves schedules
   */
  async getSchedules(
    requestParameters: GetSchedulesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Schedule> {
    const response = await this.getSchedulesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns Season
   * Retrieves season
   */
  async getSeasonRaw(
    requestParameters: GetSeasonRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Season>> {
    if (
      requestParameters.sportId === null ||
      requestParameters.sportId === undefined
    ) {
      throw new runtime.RequiredError(
        "sportId",
        "Required parameter requestParameters.sportId was null or undefined when calling getSeason.",
      );
    }

    if (
      requestParameters.season === null ||
      requestParameters.season === undefined
    ) {
      throw new runtime.RequiredError(
        "season",
        "Required parameter requestParameters.season was null or undefined when calling getSeason.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sportId !== undefined) {
      queryParameters["sportId"] = requestParameters.sportId;
    }

    if (requestParameters.season !== undefined) {
      queryParameters["season"] = requestParameters.season;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/seasons`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SeasonFromJSON(jsonValue),
    );
  }

  /**
   * Returns Season
   * Retrieves season
   */
  async getSeason(
    requestParameters: GetSeasonRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Season> {
    const response = await this.getSeasonRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns All Seasons
   * Retrieves All Seasons
   */
  async getSeasonsRaw(
    requestParameters: GetSeasonsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Seasons>> {
    if (
      requestParameters.sportId === null ||
      requestParameters.sportId === undefined
    ) {
      throw new runtime.RequiredError(
        "sportId",
        "Required parameter requestParameters.sportId was null or undefined when calling getSeasons.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sportId !== undefined) {
      queryParameters["sportId"] = requestParameters.sportId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/seasons/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SeasonsFromJSON(jsonValue),
    );
  }

  /**
   * Returns All Seasons
   * Retrieves All Seasons
   */
  async getSeasons(
    requestParameters: GetSeasonsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Seasons> {
    const response = await this.getSeasonsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Returns Teams
   * Retrieves Teams
   */
  async getTeamsRaw(
    requestParameters: GetTeamsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Teams>> {
    if (
      requestParameters.sportId === null ||
      requestParameters.sportId === undefined
    ) {
      throw new runtime.RequiredError(
        "sportId",
        "Required parameter requestParameters.sportId was null or undefined when calling getTeams.",
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sportId !== undefined) {
      queryParameters["sportId"] = requestParameters.sportId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v1/teams`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TeamsFromJSON(jsonValue),
    );
  }

  /**
   * Returns Teams
   * Retrieves Teams
   */
  async getTeams(
    requestParameters: GetTeamsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Teams> {
    const response = await this.getTeamsRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
