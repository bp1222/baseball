/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An API for MLB Stat API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { GameContent } from "./GameContent";
import {
  GameContentFromJSON,
  GameContentFromJSONTyped,
  GameContentToJSON,
} from "./GameContent";
import type { GameTeams } from "./GameTeams";
import {
  GameTeamsFromJSON,
  GameTeamsFromJSONTyped,
  GameTeamsToJSON,
} from "./GameTeams";
import type { Status } from "./Status";
import { StatusFromJSON, StatusFromJSONTyped, StatusToJSON } from "./Status";
import type { Venue } from "./Venue";
import { VenueFromJSON, VenueFromJSONTyped, VenueToJSON } from "./Venue";

/**
 * MLB Game
 * @export
 * @interface Game
 */
export interface Game {
  /**
   *
   * @type {number}
   * @memberof Game
   */
  gamePk?: number;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  gameGuid?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  link?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  gameType?: string;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  season?: number;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  gameDate?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  officialDate?: string;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  rescheduledTo?: number;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  rescheduledToDate?: string;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  rescheduledFrom?: number;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  rescheduledFromDate?: string;
  /**
   *
   * @type {Status}
   * @memberof Game
   */
  status?: Status;
  /**
   *
   * @type {GameTeams}
   * @memberof Game
   */
  teams?: GameTeams;
  /**
   *
   * @type {Venue}
   * @memberof Game
   */
  venue?: Venue;
  /**
   *
   * @type {GameContent}
   * @memberof Game
   */
  content?: GameContent;
  /**
   *
   * @type {boolean}
   * @memberof Game
   */
  isTie?: boolean;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  gameNumber?: number;
  /**
   *
   * @type {boolean}
   * @memberof Game
   */
  publicFacing?: boolean;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  doubleHeader?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  gamedayType?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  tiebreaker?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  calendarEventID?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  seasonDisplay?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  dayNight?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  description?: string;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  scheduledInnings?: number;
  /**
   *
   * @type {boolean}
   * @memberof Game
   */
  reverseHomeAwayStatus?: boolean;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  inningBreakLength?: number;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  gamesInSeries?: number;
  /**
   *
   * @type {number}
   * @memberof Game
   */
  seriesGameNumber?: number;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  seriesDescription?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  recordSource?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  ifNecessary?: string;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  ifNecessaryDescription?: string;
}

/**
 * Check if a given object implements the Game interface.
 */
export function instanceOfGame(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function GameFromJSON(json: any): Game {
  return GameFromJSONTyped(json, false);
}

export function GameFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Game {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    gamePk: !exists(json, "gamePk") ? undefined : json["gamePk"],
    gameGuid: !exists(json, "gameGuid") ? undefined : json["gameGuid"],
    link: !exists(json, "link") ? undefined : json["link"],
    gameType: !exists(json, "gameType") ? undefined : json["gameType"],
    season: !exists(json, "season") ? undefined : json["season"],
    gameDate: !exists(json, "gameDate") ? undefined : json["gameDate"],
    officialDate: !exists(json, "officialDate")
      ? undefined
      : json["officialDate"],
    rescheduledTo: !exists(json, "rescheduledTo")
      ? undefined
      : json["rescheduledTo"],
    rescheduledToDate: !exists(json, "rescheduledToDate")
      ? undefined
      : json["rescheduledToDate"],
    rescheduledFrom: !exists(json, "rescheduledFrom")
      ? undefined
      : json["rescheduledFrom"],
    rescheduledFromDate: !exists(json, "rescheduledFromDate")
      ? undefined
      : json["rescheduledFromDate"],
    status: !exists(json, "status")
      ? undefined
      : StatusFromJSON(json["status"]),
    teams: !exists(json, "teams")
      ? undefined
      : GameTeamsFromJSON(json["teams"]),
    venue: !exists(json, "venue") ? undefined : VenueFromJSON(json["venue"]),
    content: !exists(json, "content")
      ? undefined
      : GameContentFromJSON(json["content"]),
    isTie: !exists(json, "isTie") ? undefined : json["isTie"],
    gameNumber: !exists(json, "gameNumber") ? undefined : json["gameNumber"],
    publicFacing: !exists(json, "publicFacing")
      ? undefined
      : json["publicFacing"],
    doubleHeader: !exists(json, "doubleHeader")
      ? undefined
      : json["doubleHeader"],
    gamedayType: !exists(json, "gamedayType") ? undefined : json["gamedayType"],
    tiebreaker: !exists(json, "tiebreaker") ? undefined : json["tiebreaker"],
    calendarEventID: !exists(json, "calendarEventID")
      ? undefined
      : json["calendarEventID"],
    seasonDisplay: !exists(json, "seasonDisplay")
      ? undefined
      : json["seasonDisplay"],
    dayNight: !exists(json, "dayNight") ? undefined : json["dayNight"],
    description: !exists(json, "description") ? undefined : json["description"],
    scheduledInnings: !exists(json, "scheduledInnings")
      ? undefined
      : json["scheduledInnings"],
    reverseHomeAwayStatus: !exists(json, "reverseHomeAwayStatus")
      ? undefined
      : json["reverseHomeAwayStatus"],
    inningBreakLength: !exists(json, "inningBreakLength")
      ? undefined
      : json["inningBreakLength"],
    gamesInSeries: !exists(json, "gamesInSeries")
      ? undefined
      : json["gamesInSeries"],
    seriesGameNumber: !exists(json, "seriesGameNumber")
      ? undefined
      : json["seriesGameNumber"],
    seriesDescription: !exists(json, "seriesDescription")
      ? undefined
      : json["seriesDescription"],
    recordSource: !exists(json, "recordSource")
      ? undefined
      : json["recordSource"],
    ifNecessary: !exists(json, "ifNecessary") ? undefined : json["ifNecessary"],
    ifNecessaryDescription: !exists(json, "ifNecessaryDescription")
      ? undefined
      : json["ifNecessaryDescription"],
  };
}

export function GameToJSON(value?: Game | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    gamePk: value.gamePk,
    gameGuid: value.gameGuid,
    link: value.link,
    gameType: value.gameType,
    season: value.season,
    gameDate: value.gameDate,
    officialDate: value.officialDate,
    rescheduledTo: value.rescheduledTo,
    rescheduledToDate: value.rescheduledToDate,
    rescheduledFrom: value.rescheduledFrom,
    rescheduledFromDate: value.rescheduledFromDate,
    status: StatusToJSON(value.status),
    teams: GameTeamsToJSON(value.teams),
    venue: VenueToJSON(value.venue),
    content: GameContentToJSON(value.content),
    isTie: value.isTie,
    gameNumber: value.gameNumber,
    publicFacing: value.publicFacing,
    doubleHeader: value.doubleHeader,
    gamedayType: value.gamedayType,
    tiebreaker: value.tiebreaker,
    calendarEventID: value.calendarEventID,
    seasonDisplay: value.seasonDisplay,
    dayNight: value.dayNight,
    description: value.description,
    scheduledInnings: value.scheduledInnings,
    reverseHomeAwayStatus: value.reverseHomeAwayStatus,
    inningBreakLength: value.inningBreakLength,
    gamesInSeries: value.gamesInSeries,
    seriesGameNumber: value.seriesGameNumber,
    seriesDescription: value.seriesDescription,
    recordSource: value.recordSource,
    ifNecessary: value.ifNecessary,
    ifNecessaryDescription: value.ifNecessaryDescription,
  };
}
