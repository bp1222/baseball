/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An API for MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Division } from './Division';
import {
    DivisionFromJSON,
    DivisionFromJSONTyped,
    DivisionToJSON,
} from './Division';
import type { League } from './League';
import {
    LeagueFromJSON,
    LeagueFromJSONTyped,
    LeagueToJSON,
} from './League';
import type { Sport } from './Sport';
import {
    SportFromJSON,
    SportFromJSONTyped,
    SportToJSON,
} from './Sport';
import type { Venue } from './Venue';
import {
    VenueFromJSON,
    VenueFromJSONTyped,
    VenueToJSON,
} from './Venue';

/**
 * MLB Team
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    allStarStatus?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    season?: number;
    /**
     * 
     * @type {Venue}
     * @memberof Team
     */
    venue?: Venue;
    /**
     * 
     * @type {Venue}
     * @memberof Team
     */
    springVenue?: Venue;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    teamCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    fileCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    abbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    teamName?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    locationName?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    firstYearOfPlay?: string;
    /**
     * 
     * @type {League}
     * @memberof Team
     */
    league?: League;
    /**
     * 
     * @type {League}
     * @memberof Team
     */
    springLeague?: League;
    /**
     * 
     * @type {Division}
     * @memberof Team
     */
    division?: Division;
    /**
     * 
     * @type {Sport}
     * @memberof Team
     */
    sport?: Sport;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    shortName?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    franchiseName?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    clubName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Team
     */
    active?: boolean;
}

/**
 * Check if a given object implements the Team interface.
 */
export function instanceOfTeam(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TeamFromJSON(json: any): Team {
    return TeamFromJSONTyped(json, false);
}

export function TeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Team {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'link': !exists(json, 'link') ? undefined : json['link'],
        'allStarStatus': !exists(json, 'allStarStatus') ? undefined : json['allStarStatus'],
        'season': !exists(json, 'season') ? undefined : json['season'],
        'venue': !exists(json, 'venue') ? undefined : json['venue'],
        'springVenue': !exists(json, 'springVenue') ? undefined : json['springVenue'],
        'teamCode': !exists(json, 'teamCode') ? undefined : json['teamCode'],
        'fileCode': !exists(json, 'fileCode') ? undefined : json['fileCode'],
        'abbreviation': !exists(json, 'abbreviation') ? undefined : json['abbreviation'],
        'teamName': !exists(json, 'teamName') ? undefined : json['teamName'],
        'locationName': !exists(json, 'locationName') ? undefined : json['locationName'],
        'firstYearOfPlay': !exists(json, 'firstYearOfPlay') ? undefined : json['firstYearOfPlay'],
        'league': !exists(json, 'league') ? undefined : json['league'],
        'springLeague': !exists(json, 'springLeague') ? undefined : json['springLeague'],
        'division': !exists(json, 'division') ? undefined : json['division'],
        'sport': !exists(json, 'sport') ? undefined : json['sport'],
        'shortName': !exists(json, 'shortName') ? undefined : json['shortName'],
        'franchiseName': !exists(json, 'franchiseName') ? undefined : json['franchiseName'],
        'clubName': !exists(json, 'clubName') ? undefined : json['clubName'],
        'active': !exists(json, 'active') ? undefined : json['active'],
    };
}

export function TeamToJSON(value?: Team | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'link': value.link,
        'allStarStatus': value.allStarStatus,
        'season': value.season,
        'venue': value.venue,
        'springVenue': value.springVenue,
        'teamCode': value.teamCode,
        'fileCode': value.fileCode,
        'abbreviation': value.abbreviation,
        'teamName': value.teamName,
        'locationName': value.locationName,
        'firstYearOfPlay': value.firstYearOfPlay,
        'league': value.league,
        'springLeague': value.springLeague,
        'division': value.division,
        'sport': value.sport,
        'shortName': value.shortName,
        'franchiseName': value.franchiseName,
        'clubName': value.clubName,
        'active': value.active,
    };
}

