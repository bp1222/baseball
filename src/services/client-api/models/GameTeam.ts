/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An API for MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GameTeamLeagueRecord } from './GameTeamLeagueRecord';
import {
    GameTeamLeagueRecordFromJSON,
    GameTeamLeagueRecordFromJSONTyped,
    GameTeamLeagueRecordToJSON,
} from './GameTeamLeagueRecord';
import type { Team } from './Team';
import {
    TeamFromJSON,
    TeamFromJSONTyped,
    TeamToJSON,
} from './Team';

/**
 * MLB Game Team
 * @export
 * @interface GameTeam
 */
export interface GameTeam {
    /**
     * 
     * @type {GameTeamLeagueRecord}
     * @memberof GameTeam
     */
    leagueRecord?: GameTeamLeagueRecord;
    /**
     * 
     * @type {number}
     * @memberof GameTeam
     */
    score?: number;
    /**
     * 
     * @type {Team}
     * @memberof GameTeam
     */
    team?: Team;
    /**
     * 
     * @type {boolean}
     * @memberof GameTeam
     */
    isWinner?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GameTeam
     */
    splitSquad?: boolean;
    /**
     * 
     * @type {number}
     * @memberof GameTeam
     */
    seriesNumber?: number;
}

/**
 * Check if a given object implements the GameTeam interface.
 */
export function instanceOfGameTeam(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GameTeamFromJSON(json: any): GameTeam {
    return GameTeamFromJSONTyped(json, false);
}

export function GameTeamFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameTeam {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'leagueRecord': !exists(json, 'leagueRecord') ? undefined : GameTeamLeagueRecordFromJSON(json['leagueRecord']),
        'score': !exists(json, 'score') ? undefined : json['score'],
        'team': !exists(json, 'team') ? undefined : TeamFromJSON(json['team']),
        'isWinner': !exists(json, 'isWinner') ? undefined : json['isWinner'],
        'splitSquad': !exists(json, 'splitSquad') ? undefined : json['splitSquad'],
        'seriesNumber': !exists(json, 'seriesNumber') ? undefined : json['seriesNumber'],
    };
}

export function GameTeamToJSON(value?: GameTeam | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'leagueRecord': GameTeamLeagueRecordToJSON(value.leagueRecord),
        'score': value.score,
        'team': TeamToJSON(value.team),
        'isWinner': value.isWinner,
        'splitSquad': value.splitSquad,
        'seriesNumber': value.seriesNumber,
    };
}

