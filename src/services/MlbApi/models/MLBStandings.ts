/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An spec API to consume the MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MLBRecord } from './MLBRecord';
import {
    MLBRecordFromJSON,
    MLBRecordFromJSONTyped,
    MLBRecordToJSON,
} from './MLBRecord';
import type { MLBDivision } from './MLBDivision';
import {
    MLBDivisionFromJSON,
    MLBDivisionFromJSONTyped,
    MLBDivisionToJSON,
} from './MLBDivision';
import type { MLBLeague } from './MLBLeague';
import {
    MLBLeagueFromJSON,
    MLBLeagueFromJSONTyped,
    MLBLeagueToJSON,
} from './MLBLeague';
import type { MLBSport } from './MLBSport';
import {
    MLBSportFromJSON,
    MLBSportFromJSONTyped,
    MLBSportToJSON,
} from './MLBSport';

/**
 * Standings
 * 
 * @export
 * @interface MLBStandings
 */
export interface MLBStandings {
    /**
     * 
     * @type {string}
     * @memberof MLBStandings
     */
    standingsType?: string;
    /**
     * 
     * @type {MLBLeague}
     * @memberof MLBStandings
     */
    league?: MLBLeague;
    /**
     * 
     * @type {MLBDivision}
     * @memberof MLBStandings
     */
    division?: MLBDivision;
    /**
     * 
     * @type {MLBSport}
     * @memberof MLBStandings
     */
    sport?: MLBSport;
    /**
     * 
     * @type {string}
     * @memberof MLBStandings
     */
    lastUpdated?: string;
    /**
     * 
     * @type {Array<MLBRecord>}
     * @memberof MLBStandings
     */
    teamRecords?: Array<MLBRecord>;
}

/**
 * Check if a given object implements the MLBStandings interface.
 */
export function instanceOfMLBStandings(value: object): value is MLBStandings {
    return true;
}

export function MLBStandingsFromJSON(json: any): MLBStandings {
    return MLBStandingsFromJSONTyped(json, false);
}

export function MLBStandingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MLBStandings {
    if (json == null) {
        return json;
    }
    return {
        
        'standingsType': json['standingsType'] == null ? undefined : json['standingsType'],
        'league': json['league'] == null ? undefined : MLBLeagueFromJSON(json['league']),
        'division': json['division'] == null ? undefined : MLBDivisionFromJSON(json['division']),
        'sport': json['sport'] == null ? undefined : MLBSportFromJSON(json['sport']),
        'lastUpdated': json['lastUpdated'] == null ? undefined : json['lastUpdated'],
        'teamRecords': json['teamRecords'] == null ? undefined : ((json['teamRecords'] as Array<any>).map(MLBRecordFromJSON)),
    };
}

export function MLBStandingsToJSON(value?: MLBStandings | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'standingsType': value['standingsType'],
        'league': MLBLeagueToJSON(value['league']),
        'division': MLBDivisionToJSON(value['division']),
        'sport': MLBSportToJSON(value['sport']),
        'lastUpdated': value['lastUpdated'],
        'teamRecords': value['teamRecords'] == null ? undefined : ((value['teamRecords'] as Array<any>).map(MLBRecordToJSON)),
    };
}

