/* tslint:disable */
/* eslint-disable */
/**
 * MLB StatAPI
 * An spec API to consume the MLB Stat API 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MLBSchedule,
  MLBSeason,
  MLBSeasons,
  MLBTeams,
} from '../models/index';
import {
    MLBScheduleFromJSON,
    MLBScheduleToJSON,
    MLBSeasonFromJSON,
    MLBSeasonToJSON,
    MLBSeasonsFromJSON,
    MLBSeasonsToJSON,
    MLBTeamsFromJSON,
    MLBTeamsToJSON,
} from '../models/index';

export interface GetAllSeasonsRequest {
    sportId: number;
}

export interface GetScheduleRequest {
    sportId: number;
    teamId?: number;
    startDate?: string;
    endDate?: string;
}

export interface GetSeasonRequest {
    sportId: number;
    season: number;
}

export interface GetTeamsRequest {
    sportId: number;
}

/**
 * 
 */
export class MlbApi extends runtime.BaseAPI {

    /**
     * Returns All Seasons 
     * Retrieves All Seasons over time
     */
    async getAllSeasonsRaw(requestParameters: GetAllSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MLBSeasons>> {
        if (requestParameters['sportId'] == null) {
            throw new runtime.RequiredError(
                'sportId',
                'Required parameter "sportId" was null or undefined when calling getAllSeasons().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sportId'] != null) {
            queryParameters['sportId'] = requestParameters['sportId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/seasons/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MLBSeasonsFromJSON(jsonValue));
    }

    /**
     * Returns All Seasons 
     * Retrieves All Seasons over time
     */
    async getAllSeasons(requestParameters: GetAllSeasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MLBSeasons> {
        const response = await this.getAllSeasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns Schedule 
     * Retrieves schedule
     */
    async getScheduleRaw(requestParameters: GetScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MLBSchedule>> {
        if (requestParameters['sportId'] == null) {
            throw new runtime.RequiredError(
                'sportId',
                'Required parameter "sportId" was null or undefined when calling getSchedule().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sportId'] != null) {
            queryParameters['sportId'] = requestParameters['sportId'];
        }

        if (requestParameters['teamId'] != null) {
            queryParameters['teamId'] = requestParameters['teamId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/schedule`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MLBScheduleFromJSON(jsonValue));
    }

    /**
     * Returns Schedule 
     * Retrieves schedule
     */
    async getSchedule(requestParameters: GetScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MLBSchedule> {
        const response = await this.getScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns Season 
     * Retrieves season
     */
    async getSeasonRaw(requestParameters: GetSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MLBSeason>> {
        if (requestParameters['sportId'] == null) {
            throw new runtime.RequiredError(
                'sportId',
                'Required parameter "sportId" was null or undefined when calling getSeason().'
            );
        }

        if (requestParameters['season'] == null) {
            throw new runtime.RequiredError(
                'season',
                'Required parameter "season" was null or undefined when calling getSeason().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sportId'] != null) {
            queryParameters['sportId'] = requestParameters['sportId'];
        }

        if (requestParameters['season'] != null) {
            queryParameters['season'] = requestParameters['season'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/seasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MLBSeasonFromJSON(jsonValue));
    }

    /**
     * Returns Season 
     * Retrieves season
     */
    async getSeason(requestParameters: GetSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MLBSeason> {
        const response = await this.getSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns Teams 
     * Retrieves Teams
     */
    async getTeamsRaw(requestParameters: GetTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MLBTeams>> {
        if (requestParameters['sportId'] == null) {
            throw new runtime.RequiredError(
                'sportId',
                'Required parameter "sportId" was null or undefined when calling getTeams().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sportId'] != null) {
            queryParameters['sportId'] = requestParameters['sportId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MLBTeamsFromJSON(jsonValue));
    }

    /**
     * Returns Teams 
     * Retrieves Teams
     */
    async getTeams(requestParameters: GetTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MLBTeams> {
        const response = await this.getTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
